name: Build hanwckf's kernal3.x Padavan

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: 'target to compile'
        options:
        - Phicomm_K1
        - Phicomm_K2
        - Oyewifi_OYE-0001
        - Lenovo_NEWIFI-MINI
        - Xiaomi_MINI
        - Xiaomi_3
        - Xiaomi_3C
        - Xiaomi_4
        - Xiaomi_R3G
        - Xiaomi_R4A
        - Xiaomi_R3P
        - Gee_HiWifi1S
        - Gee_HiWifi2
        - Gee_Enjoy1200
        - Qihoo_360P2
        - Xiaomi_NANO
        - Meizu_R13
        - Meizu_R13P
        - Asus_RT-AC1200GU
        - Xiaoyu_C1
        - Xiaoyu_C3
        - Xiaoyu_C5
        - Youhua_WR1200JS
        - Diting_NEWIFI3
        - Gee_B70
        - Totolink_A3004NS
        - Phicomm_K2P
        - Phicomm_K2P-USB
        - JCG_836PRO
        - JCG_AC860M
        - DLINK_DIR-882
        - DLINK_DIR-878
        - Motorola_MR2600
        - TP-LINK_WDR7300
        - Redmi_AC2100
        - Xiaomi_CR6606
        - Xiaomi_CR6608
        - Xiaomi_CR6609
        - Xiaomi_AC2100
        - JCG_Y2
        - ZTE_E8820V2
        - ZTE_E8820S
        - Raisecom_MSG1500_X.00
        - Netgear_R6220
      uploadanon:
        type: boolean
        description: 'upload firmware to anonfiles'
        default: 'false'
env:
  REPOSITORY_URL: https://github.com/hanwckf/rt-n56u.git
  TOOLCHAIN_URL: https://github.com/hanwckf/padavan-toolchain/releases/download/v1.1/mipsel-linux-uclibc.tar.xz
  WORK_PATH: /opt/rt-n56u
  TIME_ZONE: Asia/Shanghai
  FIRMWARE_AUTHOR: hanwckf
  FIRMWARE_PATH: /opt/firmwares
jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - uses: actions/checkout@v4
    - uses: Bonnie2980/variable-mapper@master
      id: export
      with:
        key: "${{ github.event.inputs.target }}"
        map: |
          {
            "Phicomm_K1": {
              "model": "PSG1208"
            },
            "Phicomm_K2": {
              "model": "PSG1218"
            },
            "Oyewifi_OYE-0001": {
              "model": "OYE-001"
            },
            "Lenovo_NEWIFI-MINI": {
              "model": "NEWIFI-MINI"
            },
            "Xiaomi_MINI": {
              "model": "MI-MINI"
            },
            "Xiaomi_3": {
              "model": "MI-3"
            },
            "Xiaomi_3C": {
              "model": "MI-3C"
            },
            "Xiaomi_4": {
              "model": "MI-4"
            },
            "Xiaomi_R3G": {
              "model": "MI-R3G"
            },
            "Xiaomi_R4A": {
              "model": "MI-R4A"
            },
            "Xiaomi_R3P": {
              "model": "MI-R3P"
            },
            "Gee_HiWifi1S": {
              "model": "HC5661A"
            },
            "Gee_HiWifi2": {
              "model": "HC5761A"
            },
            "Gee_Enjoy1200": {
              "model": "HC5861B"
            },
            "Qihoo_360P2": {
              "model": "360P2"
            },
            "Xiaomi_NANO": {
              "model": "MI-NANO"
            },
            "Meizu_R13": {
              "model": "MZ-R13"
            },
            "Meizu_R13P": {
              "model": "MZ-R13P"
            },
            "Asus_RT-AC1200GU": {
              "model": "RT-AC1200GU"
            },
            "Xiaoyu_C1": {
              "model": "XY-C1"
            },
            "Xiaoyu_C3": {
              "model": "XY-C1"
            },
            "Xiaoyu_C5": {
              "model": "XY-C1"
            },
            "Youhua_WR1200JS": {
              "model": "WR1200JS"
            },
            "Diting_NEWIFI3": {
              "model": "NEWIFI3"
            },
            "Gee_B70": {
              "model": "B70"
            },
            "Totolink_A3004NS": {
              "model": "A3004NS"
            },
            "Phicomm_K2P": {
              "model": "K2P"
            },
            "Phicomm_K2P-USB": {
              "model": "K2P-USB"
            },
            "JCG_836PRO": {
              "model": "JCG-836PRO"
            },
            "JCG_AC860M": {
              "model": "JCG-AC860M"
            },
            "DLINK_DIR-882": {
              "model": "DIR-882"
            },
            "DLINK_DIR-878": {
              "model": "DIR-878"
            },
            "Motorola_MR2600": {
              "model": "MR2600"
            },
            "TP-LINK_WDR7300": {
              "model": "WDR7300"
            },
            "Redmi_AC2100": {
              "model": "RM2100"
            },
            "Xiaomi_CR6606": {
              "model": "CR660x"
            },
            "Xiaomi_CR6608": {
              "model": "CR660x"
            },
            "Xiaomi_CR6609": {
              "model": "CR660x"
            },
            "Xiaomi_AC2100": {
              "model": "R2100"
            },
            "JCG_Y2": {
              "model": "JCG-Y2"
            },
            "ZTE_E8820V2": {
              "model": "E8820V2"
            },
            "ZTE_E8820S": {
              "model": "ZTE_E8820S"
            },
            "Raisecom_MSG1500_X.00": {
              "model": "MSG1500"
            },
            "Netgear_R6220": {
              "model": "R6220"
            },
            ".*": {
              "model": "K2P"
            }
          }
        export_to: env
        mode: first_match
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot kmod \
        cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \
        pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin
        sudo timedatectl set-timezone "$TIME_ZONE"
    - name: Clone source code
      run: |
        git clone --depth=1 $REPOSITORY_URL $WORK_PATH
        cd $WORK_PATH/toolchain-mipsel
        mkdir -p toolchain-3.4.x
        wget $TOOLCHAIN_URL
        tar -xvf mipsel-linux-uclibc.tar.xz -C toolchain-3.4.x
    - name: Set environment variables
      run: |
        git config --global log.date format:'%Y%m%d'
        cd $WORK_PATH
        echo "FIRMWARE_VERSION=$(git log -1 --pretty=format:"%cd")" >> $GITHUB_ENV
        echo "FIRMWARE_DATEPREFIX=$(date +"%Y%m%d")" >> $GITHUB_ENV
    - name: Custom config
      run: |
        cd $WORK_PATH/trunk
        if [ ! -f configs/templates/${{ env.model }}.config ] ; then
        echo "configs/templates/${{ env.model }}.config not found"
        exit 1
        fi
        cp -f configs/templates/${{ env.model }}.config .config
        ################################################################################################
        #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
        ################################################################################################
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER/d' .config #删除配置项SOFTETHERVPN
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT/d' .config #删除配置项SOFTETHERVPN
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD/d' .config #删除配置项SOFTETHERVPN   
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config #删除配置项SS plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config #删除配置项SS server
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config #删除配置项DNSFORWARDER
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config #删除配置项tunsafe
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config #删除配置项阿里DDNS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config #删除配置项srelay
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME/d' .config #删除配置项adguardhome
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config #删除配置项smartdns
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ZEROTIER/d' .config #删除配置项zerotier
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DDNSTO/d' .config #删除配置项ddnsto
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WIREGUARD/d' .config #删除配置项wireguard
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config #删除配置项frp server
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config #删除配置项frp client
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALDRIVER/d' .config #删除配置项阿里云盘
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SQM/d' .config #删除配置项QOS流控
        #校园网相关开始
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config #删除配置项MENTOHUST
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config #删除配置项SCUTCLIENT
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIEAP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DOGCOM/d' .config
        #校园网相关结束
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ######################################################################
        #以下选项是定义你需要的功能（y=集成,n=忽略），重新写入到.config文件
        ######################################################################
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER=${{env.vpnsvr}}" >> .config #SOFTETHERVPN
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT=${{env.vpncli}}" >> .config #SOFTETHERVPN
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD=${{env.vpncmd}}" >> .config #SOFTETHERVPN
        #科学相关
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=${{env.ss}}" >> .config #SS plus+
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=${{env.v2ray}}" >> .config #集成v2ray执行文件（3.8M左右)
        echo "CONFIG_FIRMWARE_INCLUDE_XRAY=${{env.xray}}" >> .config #集成xray执行文件(5.6M左右)，可以代替v2ray，注：如果闪存太小不够还是建议使用v2ray
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=${{env.trojan}}" >> .config #集成trojan执行文件(1.1M左右)
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=${{env.ssobfs}}" >> .config # simple-obfs混淆插件
        echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=n" >> .config #SS server
        if [[ "${{ env.xray }}" == "y" && "${{ github.event.inputs.usexraymin }}" == "true" ]]; then
        sed -i 's/+= xray/+= xraymin/g' $WORK_PATH/trunk/user/Makefile
        fi
        #
        echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #可以不集成
        echo "CONFIG_FIRMWARE_INCLUDE_TUNSAFE=n" >> .config #tunsafe
        echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=${{env.dnsforwarder}}" >> .config #dnsforwarder
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=${{env.adbyby}}" >> .config #adbyby plus+
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=${{env.adguardhome}}" >> .config #adguardhome
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=${{env.smartdns}}" >> .config #smartdns
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=${{env.aliddns}}" >> .config #阿里DDNS
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=${{env.zerotier}}" >> .config #zerotier ~1.3M
        echo "CONFIG_FIRMWARE_INCLUDE_DDNSTO=${{env.ddnsto}}" >> .config #ddnsto
        echo "CONFIG_FIRMWARE_INCLUDE_WIREGUARD=${{env.wireguard}}" >> .config #wireguard
        echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #frp server
        echo "CONFIG_FIRMWARE_INCLUDE_FRPC=${{env.frpc}}" >> .config #frp client
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ALDRIVER=${{env.aldrive}}" >> .config #阿里云盘
        echo "CONFIG_FIRMWARE_INCLUDE_SQM=${{env.sqm}}" >> .config #QOS流控
        #
        #校园网相关开始
        echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=${{env.mentohust}}" >> .config #MENTOHUST
        echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=${{env.scutclient}}" >> .config #SCUTCLIENT
        echo "CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT=${{env.njitclient}}" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_MINIEAP=${{env.minieap}}" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_DOGCOM=${{env.dogcom}}" >> .config
        #校园网相关结束
        #########################################################################################
        #自定义添加其它功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
        #格式如下：
        #sed -i '/自定义项/d' .config
        #echo "自定义项=y" >> .config
        sed -i "s/FIRMWARE_BUILDS_REV=.*/FIRMWARE_BUILDS_REV=${{ github.event.inputs.firmwarever }}/g" ./versions.inc
        echo '更新版本号时间'
        #########################################################################################
    - name: Build firmware
      run: |
        cd $WORK_PATH/trunk
        ./clear_tree
        fakeroot ./build_firmware_modify ${{ env.model }}
    - name: Organize firmware files
      id: organize
      run: |
        mkdir -p $FIRMWARE_PATH/
        cd $WORK_PATH/trunk/images
        for firmwarefile in $(ls *.trx)
        do sudo mv $firmwarefile $FIRMWARE_PATH/${FIRMWARE_DATEPREFIX}"_"${FIRMWARE_AUTHOR}"_"${{ env.model }}"_kernal3.x.trx"
        done
        cd $FIRMWARE_PATH
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "STATUS=success" >> $GITHUB_ENV
    - name : Upload packages
      uses: actions/upload-artifact@master
      if: env.STATUS == 'success'
      with:
        name: Padavan-packages
        path: ${{ env.FIRMWARE }}
    - name: Upload firmware to anonfiles
      if: env.STATUS == 'success' && github.event.inputs.uploadanon == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer anon --no-progress ${FIRMWARE} 2>&1 | tee anonfile.log
        echo "::warning file=anonfile.com::$(cat anonfile.log | grep -o -E "https?://[a-zA-Z0-9\.\/_&=@$%?~#-]*")"
    - name: Remove obsolete firmwares on artifacts
      uses: Bonnie2980/gha-remove-artifacts@master
      if: env.STATUS == 'success'
      with:
        age: '1 day'
        skip-recent: 5
